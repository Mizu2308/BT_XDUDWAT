variables: 
  DOCKER_HOST: tcp://docker:2375/
  DOCKER_DRIVER: overlay2
  DOCKER_TLS_CERTDIR: ""

  IMAGE_TEST: "$CI_REGISTRY_IMAGE/test-nodejs-app"
  BASE_IMAGE_TEST: "$IMAGE_TEST:test"
  IMAGE_STAGING: "$CI_REGISTRY_IMAGE/staging-nodejs-app"
  BASE_IMAGE_STAGING: "$IMAGE_STAGING:staging"
  IMAGE_NONPROD: "$CI_REGISTRY_IMAGE/nonprod-nodejs-app"
  BASE_IMAGE_NONPROD: "$IMAGE_NONPROD:nonprod"


  TEST_CONTAINER_NAME: "test-be-nodejs-app"
  STAGING_CONTAINER_NAME: "staging-be-nodejs-app"
  NONPROD_CONTAINER_NAME: "nonprod-be-nodejs-app"
  SERVER_USERNAME: "root"

stages:
  - build
  - test
  - deploy

.base:
  image: docker:20-dind
  tags:
    - vmogroup
  services:
    - name: docker:20-dind
      alias: docker
      command:
        - "--tls=false"
  before_script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY

.dockerbuild:
  image: docker:20-dind
  tags:
    - vmogroup
  services:
    - name: docker:20-dind
      alias: docker
      command:
        - "--tls=false"
  script:
    - docker pull $BASE_IMAGE
    
    - docker build --cache-from "$BASE_IMAGE" --tag $IMAGE:$ENV-$CI_COMMIT_SHORT_SHA . --label "filter=$ENV-commit"
    - docker build --cache-from "$BASE_IMAGE" --tag $BASE_IMAGE . --label "filter=$ENV-base"

    - docker rmi $(docker images -f "dangling=true" -q)

    - docker push $IMAGE:$ENV-$CI_COMMIT_SHORT_SHA
    - docker push $BASE_IMAGE

.addssh:
  tags:
    - vmogroup  
  before_script:
    - 'command -v ssh-agent >/dev/null || ( apt-get u pdate -y && apt-get install openssh-client -y )'
    - eval $(ssh-agent -s)
    - echo "$SSH_PRIVATE_KEY" | base64 -d | tr -d '\r' | ssh-add -
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - ssh-keyscan $SERVER_IP >> ~/.ssh/known_hosts
    - chmod 644 ~/.ssh/known_hosts

docker:test-build: 
  extends: 
    - .base
    - .dockerbuild
  stage: build
  variables: 
    ENV: test
    BASE_IMAGE: $BASE_IMAGE_TEST
    IMAGE: $IMAGE_TEST
  only:
    - test

docker:test-deploy:
  extends: 
    - .base
    - .addssh
  stage: deploy
  needs: ["docker:test-build"]
  variables: 
    PATH_FILE: "./deploy.sh"
  script: 
    - ssh -tt -o StrictHostKeyChecking=no "$SERVER_USERNAME"@"$SERVER_IP" "cd qti22080_backend; export "CONTAINER_NAME=$TEST_CONTAINER_NAME"; export IMAGE_TEST=$IMAGE_TEST; export CI_COMMIT_SHORT_SHA=$CI_COMMIT_SHORT_SHA; $PATH_FILE"   
  only:
    - test


docker:staging-build: 
  extends: 
    - .base
    - .dockerbuild
  stage: build
  variables: 
    ENV: staging
    BASE_IMAGE: $BASE_IMAGE_STAGING
    IMAGE: $IMAGE_STAGING
  only:
    - staging

sonarqube:check-code:
  stage: test
  tags:
    - vmogroup
  needs: ["docker:staging-build"]
  image: 
    name: sonarsource/sonar-scanner-cli:latest
    entrypoint: [""]
  variables:
    SONAR_USER_HOME: "${CI_PROJECT_DIR}/.sonar"  # Defines the location of the analysis task cache
    GIT_DEPTH: "0"  # Tells git to fetch all the branches of the project, required by the analysis task
  cache:
    key: "${CI_JOB_NAME}"
    paths:
      - .sonar/cache
  script: 
    - sonar-scanner -Dsonar.qualitygate.wait=true
  allow_failure: false
  only:
    - staging

docker:staging-deploy:
  extends: 
    - .base
    - .addssh
  stage: deploy
  needs: ["sonarqube:check-code"]
  variables: 
    PATH_FILE: "./deploy.sh"
  script: 
    - ssh -tt -o StrictHostKeyChecking=no "$SERVER_USERNAME"@"$SERVER_IP" "cd qti22080_backend; export "CONTAINER_NAME=$STAGING_CONTAINER_NAME"; export IMAGE_STAGING=$IMAGE_STAGING; export CI_COMMIT_SHORT_SHA=$CI_COMMIT_SHORT_SHA; $PATH_FILE" 
  only:
    - staging

docker:nonprod-build: 
  extends: 
    - .base
    - .dockerbuild
  stage: build
  variables: 
    ENV: nonprod
    BASE_IMAGE: $BASE_IMAGE_NONPROD
    IMAGE: $IMAGE_NONPROD
  only:
    - main

docker:nonprod-deploy:
  extends: 
    - .base
    - .addssh
  stage: deploy
  needs: ["docker:nonprod-build"]
  variables: 
    PATH_FILE: "./deploy.sh"
  script: 
    - ssh -tt -o StrictHostKeyChecking=no "$SERVER_USERNAME"@"$SERVER_IP" "cd qti22080_backend; export "CONTAINER_NAME=$NONPROD_CONTAINER_NAME"; export IMAGE_NONPROD=$IMAGE_NONPROD; export CI_COMMIT_SHORT_SHA=$CI_COMMIT_SHORT_SHA; $PATH_FILE"     
  only:
    - main

variables: 
  DOCKER_HOST: tcp://docker:2375/
  DOCKER_DRIVER: overlay2
  DOCKER_TLS_CERTDIR: ""

  IMAGE_TEST: "$CI_REGISTRY_IMAGE/test-vuejs-app"
  BASE_IMAGE_TEST: "$IMAGE_TEST:test"
  IMAGE_STAGING: "$CI_REGISTRY_IMAGE/staging-vuejs-app"
  BASE_IMAGE_STAGING: "$IMAGE_STAGING:staging"
  IMAGE_NONPROD: "$CI_REGISTRY_IMAGE/nonprod-vuejs-app"
  BASE_IMAGE_NONPROD: "$IMAGE_NONPROD:nonprod"

  TEST_CONTAINER_NAME: "test-vuejs-app"
  STAGING_CONTAINER_NAME: "staging-vuejs-app"
  NONPROD_CONTAINER_NAME: "nonprod-vuejs-app"
  SERVER_USERNAME: "root"

stages:
  - build
  - test
  - deploy

.base:
  image: docker:20-dind
  tags:
    - vmogroup
  services:
    - name: docker:20-dind
      alias: docker
      command:
        - "--tls=false"
  before_script:
    - echo "$CI_REGISTRY_PASSWORD" | docker login -u "$CI_REGISTRY_USER" "$CI_REGISTRY" --password-stdin

docker:test_build: 
  extends: .base
  stage: build
  tags:
    - vmogroup
  cache:
    paths:
      - node_modules/
  variables: 
    ENV: test
    VUE_APP_I18N_LOCALE: jp
    VUE_APP_I18N_FALLBACK_LOCALE: jp
  script: 
    - docker pull $BASE_IMAGE_TEST

    - true > .env.production
    - echo VUE_APP_URL=$VUE_APP_URL >> .env.production
    - echo VUE_APP_I18N_LOCALE=$VUE_APP_I18N_LOCALE >> .env.production
    - echo VUE_APP_I18N_FALLBACK_LOCALE=$VUE_APP_I18N_FALLBACK_LOCALE >> .env.production
    - echo VUE_APP_DEFAULT_AUTH=$VUE_APP_DEFAULT_AUTH >> .env.production
    - echo VUE_APP_SAUNA_URL=$VUE_APP_SAUNA_URL >> .env.production
    - echo VUE_APP_APIKEY=$VUE_APP_APIKEY >> .env.production
    - echo VUE_APP_AUTHDOMAIN=$VUE_APP_AUTHDOMAIN >> .env.production
    - echo VUE_APP_DATABASEURL=$VUE_APP_DATABASEURL >> .env.production
    - echo VUE_APP_PROJECTId=$VUE_APP_PROJECTId >> .env.production
    - echo VUE_APP_STORAGEBUCKET=$VUE_APP_STORAGEBUCKET >> .env.production
    - echo VUE_APP_MESSAGINGSENDERID=$VUE_APP_MESSAGINGSENDERID >> .env.production
    - echo VUE_APP_APPId=$VUE_APP_APPId >> .env.production
    - echo VUE_APP_MEASUREMENTID=$VUE_APP_MEASUREMENTID >> .env.production

    - docker build --cache-from "$BASE_IMAGE_TEST" --tag $IMAGE_TEST:$ENV-$CI_COMMIT_SHORT_SHA . --label "filter=$ENV-commit"
    - docker build --cache-from "$BASE_IMAGE_TEST" --tag $BASE_IMAGE_TEST . --label "filter=$ENV-base"

    - docker rmi $(docker images -f "dangling=true" -q)

    - docker push $IMAGE_TEST:$ENV-$CI_COMMIT_SHORT_SHA
    - docker push $BASE_IMAGE_TEST
  only:
    - test

docker:test_deploy:
  extends: .base
  stage: deploy
  tags:
    - vmogroup
  needs: ["docker:test_build"]  
  before_script:
    - 'command -v ssh-agent >/dev/null || ( apt-get u pdate -y && apt-get install openssh-client -y )'
    - eval $(ssh-agent -s)
    - echo "$SSH_PRIVATE_KEY" | base64 -d | tr -d '\r' | ssh-add -
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - ssh-keyscan $SERVER_IP >> ~/.ssh/known_hosts
    - chmod 644 ~/.ssh/known_hosts
  script: 
    - ssh -tt -o StrictHostKeyChecking=no "$SERVER_USERNAME"@"$SERVER_IP" "export "CONTAINER_NAME=$TEST_CONTAINER_NAME"; export IMAGE_TEST=$IMAGE_TEST; export CI_COMMIT_SHORT_SHA=$CI_COMMIT_SHORT_SHA; ./deploy.sh"
  only:
    - test

docker:staging_build: 
    extends: .base
    stage: build
    tags:
      - vmogroup
    cache:
      paths:
        - node_modules/
    variables: 
      ENV: staging
      VUE_APP_I18N_LOCALE: jp
      VUE_APP_I18N_FALLBACK_LOCALE: jp
    script: 
      - docker pull $BASE_IMAGE_STAGING
      
      - true > .env.production
      - echo VUE_APP_URL=$VUE_APP_URL >> .env.production
      - echo VUE_APP_I18N_LOCALE=$VUE_APP_I18N_LOCALE >> .env.production
      - echo VUE_APP_I18N_FALLBACK_LOCALE=$VUE_APP_I18N_FALLBACK_LOCALE >> .env.production
      - echo VUE_APP_DEFAULT_AUTH=$VUE_APP_DEFAULT_AUTH >> .env.production
      - echo VUE_APP_SAUNA_URL=$VUE_APP_SAUNA_URL >> .env.production
      - echo VUE_APP_APIKEY=$VUE_APP_APIKEY >> .env.production
      - echo VUE_APP_AUTHDOMAIN=$VUE_APP_AUTHDOMAIN >> .env.production
      - echo VUE_APP_DATABASEURL=$VUE_APP_DATABASEURL >> .env.production
      - echo VUE_APP_PROJECTId=$VUE_APP_PROJECTId >> .env.production
      - echo VUE_APP_STORAGEBUCKET=$VUE_APP_STORAGEBUCKET >> .env.production
      - echo VUE_APP_MESSAGINGSENDERID=$VUE_APP_MESSAGINGSENDERID >> .env.production
      - echo VUE_APP_APPId=$VUE_APP_APPId >> .env.production
      - echo VUE_APP_MEASUREMENTID=$VUE_APP_MEASUREMENTID >> .env.production

      
      - docker build --cache-from "$BASE_IMAGE_STAGING" --tag $IMAGE_STAGING:$ENV-$CI_COMMIT_SHORT_SHA . --label "filter=$ENV-commit"
      #- docker build --cache-from "$BASE_IMAGE_STAGING" --tag $BASE_IMAGE_STAGING . --label "filter=$ENV-base"
  
      #- docker rmi $(docker images -f "dangling=true" -q)
  
      - docker push $IMAGE_STAGING:$ENV-$CI_COMMIT_SHORT_SHA
      #- docker push $BASE_IMAGE_STAGING
    only:
      - staging
  
# sonarqube-check:
#   image: 
#     name: sonarsource/sonar-scanner-cli:latest
#     entrypoint: [""]
#   tags:
#     - vmogroup
#   stage: test
#   variables:
#     SONAR_USER_HOME: "${CI_PROJECT_DIR}/.sonar"  # Defines the location of the analysis task cache
#     GIT_DEPTH: "0"  # Tells git to fetch all the branches of the project, required by the analysis task
#   cache:
#     key: "${CI_JOB_NAME}"
#     paths:
#       - .sonar/cache
#   script: 
#     - sonar-scanner
#   allow_failure: false
#   only:
#     - staging

docker:staging_deploy:
  extends: .base
  stage: deploy
  tags:
    - vmogroup
  needs: ["docker:staging_build"]  
  before_script:
    - 'command -v ssh-agent >/dev/null || ( apt-get u pdate -y && apt-get install openssh-client -y )'
    - eval $(ssh-agent -s)
    - echo "$SSH_PRIVATE_KEY" | base64 -d | tr -d '\r' | ssh-add -
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - ssh-keyscan $SERVER_IP >> ~/.ssh/known_hosts
    - chmod 644 ~/.ssh/known_hosts
  script: 
    - ssh -tt -o StrictHostKeyChecking=no "$SERVER_USERNAME"@"$SERVER_IP" "cd qti22080_frontend; export "CONTAINER_NAME=$STAGING_CONTAINER_NAME"; export IMAGE_STAGING=$IMAGE_STAGING; export CI_COMMIT_SHORT_SHA=$CI_COMMIT_SHORT_SHA; ./deploy.sh"
  only:
    - staging

docker:nonprod_build: 
    extends: .base
    stage: build
    tags:
      - vmogroup
    cache:
      paths:
        - node_modules/
    variables: 
      ENV: nonprod
      VUE_APP_I18N_LOCALE: jp
      VUE_APP_I18N_FALLBACK_LOCALE: jp
    script: 
      - docker pull $BASE_IMAGE_NONPROD
      
      - true > .env.production
      - echo VUE_APP_URL=$VUE_APP_URL >> .env.production
      - echo VUE_APP_I18N_LOCALE=$VUE_APP_I18N_LOCALE >> .env.production
      - echo VUE_APP_I18N_FALLBACK_LOCALE=$VUE_APP_I18N_FALLBACK_LOCALE >> .env.production
      - echo VUE_APP_SAUNA_URL=$VUE_APP_SAUNA_URL_NONPROD >> .env.production
      - echo VUE_APP_DEFAULT_AUTH=$VUE_APP_DEFAULT_AUTH >> .env.production
      - echo VUE_APP_APIKEY=$VUE_APP_APIKEY >> .env.production
      - echo VUE_APP_AUTHDOMAIN=$VUE_APP_AUTHDOMAIN >> .env.production
      - echo VUE_APP_DATABASEURL=$VUE_APP_DATABASEURL >> .env.production
      - echo VUE_APP_PROJECTId=$VUE_APP_PROJECTId >> .env.production
      - echo VUE_APP_STORAGEBUCKET=$VUE_APP_STORAGEBUCKET >> .env.production
      - echo VUE_APP_MESSAGINGSENDERID=$VUE_APP_MESSAGINGSENDERID >> .env.production
      - echo VUE_APP_APPId=$VUE_APP_APPId >> .env.production
      - echo VUE_APP_MEASUREMENTID=$VUE_APP_MEASUREMENTID >> .env.production

      
      - docker build --cache-from "$BASE_IMAGE_NONPROD" --tag $IMAGE_NONPROD:$ENV-$CI_COMMIT_SHORT_SHA . --label "filter=$ENV-commit"
      #- docker build --cache-from "$BASE_IMAGE_NONPROD" --tag $BASE_IMAGE_NONPROD . --label "filter=$ENV-base"
  
      #- docker rmi $(docker images -f "dangling=true" -q)
  
      - docker push $IMAGE_NONPROD:$ENV-$CI_COMMIT_SHORT_SHA
      #- docker push $BASE_IMAGE_NONPROD
    only:
      - main

docker:nonprod_deploy:
  extends: .base
  stage: deploy
  tags:
    - vmogroup
  needs: ["docker:nonprod_build"]  
  before_script:
    - 'command -v ssh-agent >/dev/null || ( apt-get u pdate -y && apt-get install openssh-client -y )'
    - eval $(ssh-agent -s)
    - echo "$SSH_PRIVATE_KEY" | base64 -d | tr -d '\r' | ssh-add -
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - ssh-keyscan $SERVER_IP >> ~/.ssh/known_hosts
    - chmod 644 ~/.ssh/known_hosts
  script: 
    - ssh -tt -o StrictHostKeyChecking=no "$SERVER_USERNAME"@"$SERVER_IP" "cd qti22080_frontend; export "CONTAINER_NAME=$NONPROD_CONTAINER_NAME"; export IMAGE_NONPROD=$IMAGE_NONPROD; export CI_COMMIT_SHORT_SHA=$CI_COMMIT_SHORT_SHA; ./deploy.sh"
  only:
    - main    

